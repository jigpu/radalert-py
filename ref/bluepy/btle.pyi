from typing import Any, List, Optional, Tuple, Union

class Peripheral:
    def __init__(self, deviceAddr: Optional[Union[str, ScanEntry]] = ..., addrType: str = ..., iface: Optional[int] = ...) -> None: ...
    def connect(self, addr: str, addrType: str = ..., iface: Optional[int] = ...) -> None: ...
    def disconnect(self) -> None: ...
    def getServices(self) -> List[Service]: ...
    def getServiceByUUID(self, uuidVal: Union[str, int, UUID]) -> Service: ...
    def getCharacteristics(self, startHnd: int = ..., endHnd: int = ..., uuid: Optional[Union[str, int, UUID]] = ...) -> List[Characteristic]: ...
    def getDescriptors(self, startHnd: int = ..., endHnd: int = ...) -> List[Descriptor]: ...
    def setDelegate(self, delegate_: DefaultDelegate) -> Peripheral: ...
    def waitForNotifications(self, timeout: float) -> bool: ...
    def writeCharacteristic(self, handle: int, val: bytes, withResponse: bool = ...) -> Any: ...
    def readCharacteristic(self, handle: int) -> bytes: ...
    def __del__(self) -> None: ...

class Scanner:
    def __init__(self, iface: int = ...) -> None: ...
    def start(self, passive: bool = ...) -> None: ...
    def stop(self) -> None: ...
    def clear(self) -> None: ...
    def process(self, timeout: float = ...) -> None: ...
    def getDevices(self) -> List[ScanEntry]: ...
    def scan(self, timeout: float = ..., passive: bool = ...) -> List[ScanEntry]: ...

class ScanEntry:
    addr: str = ...
    iface: int = ...
    addrType: str = ...
    rssi: int = ...
    connectable: bool = ...
    updateCount: int = ...
    def getDescription(self, sdid: int) -> str: ...
    def getValueText(self, sdid: int) -> Optional[str]: ...
    def getScanData(self) -> Tuple[int, str, Optional[str]]: ...

class DefaultDelegate:
    def __init__(self) -> None: ...
    def handleNotification(self, cHandle: int, data: bytes) -> None: ...
    def handleDiscovery(self, scanEntry: ScanEntry, isNewDev: bool, isNewData: bool) -> None: ...

class UUID:
    def __init__(self, val: Union[str, int], commonName: Optional[str] = ...) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __cmp__(self, other: Any) -> int: ...
    def __hash__(self) -> int: ...
    def getCommonName(self) -> str: ...

class Service:
    def getCharacteristics(self, forUUID: Optional[Union[str, int, UUID]] = ...) -> List[Characteristic]: ...
    def getDescriptors(self, forUUID: Optional[Union[str, int, UUID]] = ...) -> List[Descriptor]: ...

class Characteristic:
    def read(self) -> bytes: ...
    def write(self, val: bytes, withResponse: bool = ...) -> Any: ...
    def getDescriptors(self, forUUID: Optional[Union[str, int, UUID]] = ..., hndEnd: int = ...) -> List[Descriptor]: ...
    def supportsRead(self) -> bool: ...
    def propertiesToString(self) -> str: ...
    def getHandle(self) -> int: ...

class Descriptor:
    def __init__(self, *args: Any) -> None: ...
    def read(self) -> None: ...
    def write(self, val: Any, withResponse: bool = ...) -> None: ...

class BTLEException(Exception):
    def __init__(self, message: str, resp_dict: Optional[Any] = ...) -> None: ...

class BTLEInternalError(BTLEException):
    def __init__(self, message: str, rsp: Optional[Any] = ...) -> None: ...

class BTLEDisconnectError(BTLEException):
    def __init__(self, message: str, rsp: Optional[Any] = ...) -> None: ...

class BTLEManagementError(BTLEException):
    def __init__(self, message: str, rsp: Optional[Any] = ...) -> None: ...

class BTLEGattError(BTLEException):
    def __init__(self, message: str, rsp: Optional[Any] = ...) -> None: ...
